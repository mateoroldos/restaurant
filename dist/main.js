(()=>{"use strict";var e={426:(e,n,t)=>{t.d(n,{Z:()=>p});var r=t(15),o=t.n(r),a=t(645),i=t.n(a),c=t(667),d=t.n(c),s=t(592),u=i()(o()),l=d()(s);u.push([e.id,"/* Global Classes */\nbody {\n    margin: 0px;\n    padding: 0px;\n    height: 100vh;\n}\n\n#content {\n    margin: 0px;\n    padding: 0px;\n    height: 100%;\n}\n/* Header */\nheader {\n    height: 60px;\n    background-color: rgb(96, 214, 72);\n    display: grid;\n    grid-template-columns: 300px 1fr;\n}\n\nnav {\n    display: flex;\n    justify-content: center;\n}\n\nul {\n    display: flex;\n    flex-direction: row;\n}\n\nli {\n    margin-right: 20px;\n}\n\n/* Body */\nsection {\n    height: 100%;\n    background:url("+l+") rgba(0, 0, 0, 0.651);\n    background-size:cover;\n    background-blend-mode: multiply;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n\n#body-container {\n    min-width: 60vw;\n    max-width: 70vw;\n    min-height: 60vh;\n    max-height: 70vh;\n    background-color: rgba(190, 42, 42, 0.87);\n    border-radius: 10px;\n    border-style: solid;\n    border-width: 3px;\n    border-color: rgb(0, 0, 0);\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA,mBAAmB;AACnB;IACI,WAAW;IACX,YAAY;IACZ,aAAa;AACjB;;AAEA;IACI,WAAW;IACX,YAAY;IACZ,YAAY;AAChB;AACA,WAAW;AACX;IACI,YAAY;IACZ,kCAAkC;IAClC,aAAa;IACb,gCAAgC;AACpC;;AAEA;IACI,aAAa;IACb,uBAAuB;AAC3B;;AAEA;IACI,aAAa;IACb,mBAAmB;AACvB;;AAEA;IACI,kBAAkB;AACtB;;AAEA,SAAS;AACT;IACI,YAAY;IACZ,uEAAmE;IACnE,qBAAqB;IACrB,+BAA+B;IAC/B,aAAa;IACb,uBAAuB;IACvB,mBAAmB;AACvB;;AAEA;IACI,eAAe;IACf,eAAe;IACf,gBAAgB;IAChB,gBAAgB;IAChB,yCAAyC;IACzC,mBAAmB;IACnB,mBAAmB;IACnB,iBAAiB;IACjB,0BAA0B;AAC9B",sourcesContent:['/* Global Classes */\nbody {\n    margin: 0px;\n    padding: 0px;\n    height: 100vh;\n}\n\n#content {\n    margin: 0px;\n    padding: 0px;\n    height: 100%;\n}\n/* Header */\nheader {\n    height: 60px;\n    background-color: rgb(96, 214, 72);\n    display: grid;\n    grid-template-columns: 300px 1fr;\n}\n\nnav {\n    display: flex;\n    justify-content: center;\n}\n\nul {\n    display: flex;\n    flex-direction: row;\n}\n\nli {\n    margin-right: 20px;\n}\n\n/* Body */\nsection {\n    height: 100%;\n    background:url("./restaurant-background.jpeg") rgba(0, 0, 0, 0.651);\n    background-size:cover;\n    background-blend-mode: multiply;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n\n#body-container {\n    min-width: 60vw;\n    max-width: 70vw;\n    min-height: 60vh;\n    max-height: 70vh;\n    background-color: rgba(190, 42, 42, 0.87);\n    border-radius: 10px;\n    border-style: solid;\n    border-width: 3px;\n    border-color: rgb(0, 0, 0);\n}'],sourceRoot:""}]);const p=u},645:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t=e(n);return n[2]?"@media ".concat(n[2]," {").concat(t,"}"):t})).join("")},n.i=function(e,t,r){"string"==typeof e&&(e=[[null,e,""]]);var o={};if(r)for(var a=0;a<this.length;a++){var i=this[a][0];null!=i&&(o[i]=!0)}for(var c=0;c<e.length;c++){var d=[].concat(e[c]);r&&o[d[0]]||(t&&(d[2]?d[2]="".concat(t," and ").concat(d[2]):d[2]=t),n.push(d))}},n}},15:e=>{function n(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}e.exports=function(e){var t,r,o=(r=4,function(e){if(Array.isArray(e))return e}(t=e)||function(e,n){var t=e&&("undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"]);if(null!=t){var r,o,a=[],i=!0,c=!1;try{for(t=t.call(e);!(i=(r=t.next()).done)&&(a.push(r.value),!n||a.length!==n);i=!0);}catch(e){c=!0,o=e}finally{try{i||null==t.return||t.return()}finally{if(c)throw o}}return a}}(t,r)||function(e,t){if(e){if("string"==typeof e)return n(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?n(e,t):void 0}}(t,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),a=o[1],i=o[3];if("function"==typeof btoa){var c=btoa(unescape(encodeURIComponent(JSON.stringify(i)))),d="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(c),s="/*# ".concat(d," */"),u=i.sources.map((function(e){return"/*# sourceURL=".concat(i.sourceRoot||"").concat(e," */")}));return[a].concat(u).concat([s]).join("\n")}return[a].join("\n")}},667:e=>{e.exports=function(e,n){return n||(n={}),"string"!=typeof(e=e&&e.__esModule?e.default:e)?e:(/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),n.hash&&(e+=n.hash),/["'() \t\n]/.test(e)||n.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e)}},695:e=>{var n={};e.exports=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}},379:e=>{var n=[];function t(e){for(var t=-1,r=0;r<n.length;r++)if(n[r].identifier===e){t=r;break}return t}function r(e,r){for(var a={},i=[],c=0;c<e.length;c++){var d=e[c],s=r.base?d[0]+r.base:d[0],u=a[s]||0,l="".concat(s," ").concat(u);a[s]=u+1;var p=t(l),A={css:d[1],media:d[2],sourceMap:d[3]};-1!==p?(n[p].references++,n[p].updater(A)):n.push({identifier:l,updater:o(A,r),references:1}),i.push(l)}return i}function o(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap)return;t.update(e=n)}else t.remove()}}e.exports=function(e,o){var a=r(e=e||[],o=o||{});return function(e){e=e||[];for(var i=0;i<a.length;i++){var c=t(a[i]);n[c].references--}for(var d=r(e,o),s=0;s<a.length;s++){var u=t(a[s]);0===n[u].references&&(n[u].updater(),n.splice(u,1))}a=d}}},216:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n),n}},795:e=>{e.exports=function(e){var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var r=t.css,o=t.media,a=t.sourceMap;o?e.setAttribute("media",o):e.removeAttribute("media"),a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),n.styleTagTransform(r,e)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},592:(e,n,t)=>{e.exports=t.p+"a7171e2a99250892ad0b.jpeg"},468:(e,n,t)=>{e.exports=t.p+"4b33cc10015bf30d67ca.svg"}},n={};function t(r){var o=n[r];if(void 0!==o)return o.exports;var a=n[r]={id:r,exports:{}};return e[r](a,a.exports,t),a.exports}t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),(()=>{var e;t.g.importScripts&&(e=t.g.location+"");var n=t.g.document;if(!e&&n&&(n.currentScript&&(e=n.currentScript.src),!e)){var r=n.getElementsByTagName("script");r.length&&(e=r[r.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=e})(),(()=>{var e=t(379),n=t.n(e),r=t(795),o=t.n(r),a=t(695),i=t.n(a),c=t(216),d=t.n(c),s=t(426),u={styleTagTransform:function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}},setAttributes:function(e){var n=t.nc;n&&e.setAttribute("nonce",n)},insert:function(e){var n=i()("head");if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");n.appendChild(e)}};u.domAPI=o(),u.insertStyleElement=d(),n()(s.Z,u),s.Z&&s.Z.locals&&s.Z.locals;var l=t(468);const p=document.getElementById("content"),A=document.createElement("header"),m=(document.createElement("div"),document.createElement("img"));m.setAttribute("src",l),m.setAttribute("alt","Restaurant Logo"),m.setAttribute("width","30px");const h=document.createElement("nav"),f=document.createElement("ul");!function(e){for(let n=0;n<e.length;n++){const t=document.createElement("li");t.setAttribute("style","list-style-type:none"),t.innerHTML="<button id=btn-"+n+">"+e[n]+"</button>",f.appendChild(t)}}(["Home","About Us","Menu"]);const b=document.createElement("section");b.setAttribute("id","body-section");const g=document.createElement("div");g.setAttribute("id","body-container");const C=document.createElement("div");C.classList.add("content-container");const v=document.createElement("h1");v.textContent="Welcome To My Restaurant";const y=document.createElement("p");function I(){const e=document.querySelector("#body-section"),n=document.querySelector("#body-container");e.removeChild(n);const t=document.createElement("div");t.setAttribute("id","body-container"),C.appendChild(v),C.appendChild(y),t.appendChild(C),e.appendChild(t)}y.textContent="We simply serve the best food of the world";const x=document.createElement("div");x.classList.add("content-container");const B=document.createElement("h1");B.textContent="3000 Years Serving Our Clients";const E=document.createElement("p");E.textContent="We are a family restuarant funded on 1000 A.C. We invented the hot-dog and hamburgers.";const w=document.createElement("div");w.classList.add("content-container");class S{constructor(e,n){this.name=e,this.price=n}addToMenu(){const e=document.createElement("div"),n=document.createElement("div");n.innerHTML=this.name;const t=document.createElement("div");return t.innerHTML=this.price,e.appendChild(n),e.appendChild(t),e}}let T=new S("Hamburguer","$10"),j=new S("Hot Dog","$7"),k=new S("Salad","$8");w.appendChild(T.addToMenu()),w.appendChild(j.addToMenu()),w.appendChild(k.addToMenu()),A.appendChild(m),h.appendChild(f),A.appendChild(h),p.appendChild(A),b.appendChild(g),p.appendChild(b),I();const M=document.getElementById("btn-0"),L=document.getElementById("btn-1"),Y=document.getElementById("btn-2");M.addEventListener("click",(()=>{I()})),L.addEventListener("click",(()=>{!function(){const e=document.querySelector("#body-section"),n=document.querySelector("#body-container");e.removeChild(n);const t=document.createElement("div");t.setAttribute("id","body-container"),x.appendChild(B),x.appendChild(E),t.appendChild(x),e.appendChild(t)}()})),Y.addEventListener("click",(()=>{!function(){const e=document.querySelector("#body-section"),n=document.querySelector("#body-container");e.removeChild(n);const t=document.createElement("div");t.setAttribute("id","body-container"),t.appendChild(w),e.appendChild(t)}()}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9scy8uL3NyYy9zdHlsZS5jc3MiLCJ3ZWJwYWNrOi8vbHMvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzIiwid2VicGFjazovL2xzLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2Nzc1dpdGhNYXBwaW5nVG9TdHJpbmcuanMiLCJ3ZWJwYWNrOi8vbHMvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvZ2V0VXJsLmpzIiwid2VicGFjazovL2xzLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvZ2V0VGFyZ2V0LmpzIiwid2VicGFjazovL2xzLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzIiwid2VicGFjazovL2xzLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzIiwid2VicGFjazovL2xzLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanMiLCJ3ZWJwYWNrOi8vbHMvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vbHMvd2VicGFjay9ydW50aW1lL2NvbXBhdCBnZXQgZGVmYXVsdCBleHBvcnQiLCJ3ZWJwYWNrOi8vbHMvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL2xzL3dlYnBhY2svcnVudGltZS9nbG9iYWwiLCJ3ZWJwYWNrOi8vbHMvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly9scy93ZWJwYWNrL3J1bnRpbWUvcHVibGljUGF0aCIsIndlYnBhY2s6Ly9scy8uL3NyYy9zdHlsZS5jc3M/NzE2MyIsIndlYnBhY2s6Ly9scy8uL3NyYy9wYWdlLXRlbXBsYXRlLmpzIiwid2VicGFjazovL2xzLy4vc3JjL2hvbWUuanMiLCJ3ZWJwYWNrOi8vbHMvLi9zcmMvYWJvdXQtdXMuanMiLCJ3ZWJwYWNrOi8vbHMvLi9zcmMvbWVudS5qcyIsIndlYnBhY2s6Ly9scy8uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJfX19DU1NfTE9BREVSX0VYUE9SVF9fXyIsIl9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzBfX18iLCJwdXNoIiwibW9kdWxlIiwiaWQiLCJleHBvcnRzIiwiY3NzV2l0aE1hcHBpbmdUb1N0cmluZyIsImxpc3QiLCJ0b1N0cmluZyIsInRoaXMiLCJtYXAiLCJpdGVtIiwiY29udGVudCIsImNvbmNhdCIsImpvaW4iLCJpIiwibW9kdWxlcyIsIm1lZGlhUXVlcnkiLCJkZWR1cGUiLCJhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzIiwibGVuZ3RoIiwiX2kiLCJfYXJyYXlMaWtlVG9BcnJheSIsImFyciIsImxlbiIsImFycjIiLCJBcnJheSIsIl9pdGVtIiwiaXNBcnJheSIsIl9hcnJheVdpdGhIb2xlcyIsIlN5bWJvbCIsIml0ZXJhdG9yIiwiX3MiLCJfZSIsIl9hcnIiLCJfbiIsIl9kIiwiY2FsbCIsIm5leHQiLCJkb25lIiwidmFsdWUiLCJlcnIiLCJfaXRlcmFibGVUb0FycmF5TGltaXQiLCJvIiwibWluTGVuIiwibiIsIk9iamVjdCIsInByb3RvdHlwZSIsInNsaWNlIiwiY29uc3RydWN0b3IiLCJuYW1lIiwiZnJvbSIsInRlc3QiLCJfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkiLCJUeXBlRXJyb3IiLCJfbm9uSXRlcmFibGVSZXN0IiwiY3NzTWFwcGluZyIsImJ0b2EiLCJiYXNlNjQiLCJ1bmVzY2FwZSIsImVuY29kZVVSSUNvbXBvbmVudCIsIkpTT04iLCJzdHJpbmdpZnkiLCJkYXRhIiwic291cmNlTWFwcGluZyIsInNvdXJjZVVSTHMiLCJzb3VyY2VzIiwic291cmNlIiwic291cmNlUm9vdCIsInVybCIsIm9wdGlvbnMiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsImhhc2giLCJuZWVkUXVvdGVzIiwicmVwbGFjZSIsIm1lbW8iLCJ0YXJnZXQiLCJzdHlsZVRhcmdldCIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsIndpbmRvdyIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudERvY3VtZW50IiwiaGVhZCIsImUiLCJzdHlsZXNJbkRvbSIsImdldEluZGV4QnlJZGVudGlmaWVyIiwiaWRlbnRpZmllciIsInJlc3VsdCIsIm1vZHVsZXNUb0RvbSIsImlkQ291bnRNYXAiLCJpZGVudGlmaWVycyIsImJhc2UiLCJjb3VudCIsImluZGV4Iiwib2JqIiwiY3NzIiwibWVkaWEiLCJzb3VyY2VNYXAiLCJyZWZlcmVuY2VzIiwidXBkYXRlciIsImFkZFN0eWxlIiwiYXBpIiwiZG9tQVBJIiwidXBkYXRlIiwibmV3T2JqIiwicmVtb3ZlIiwibGFzdElkZW50aWZpZXJzIiwibmV3TGlzdCIsIm5ld0xhc3RJZGVudGlmaWVycyIsIl9pbmRleCIsInNwbGljZSIsInN0eWxlIiwiY3JlYXRlRWxlbWVudCIsInNldEF0dHJpYnV0ZXMiLCJhdHRyaWJ1dGVzIiwiaW5zZXJ0IiwiaW5zZXJ0U3R5bGVFbGVtZW50Iiwic2V0QXR0cmlidXRlIiwicmVtb3ZlQXR0cmlidXRlIiwic3R5bGVUYWdUcmFuc2Zvcm0iLCJhcHBseSIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsInJlbW92ZVN0eWxlRWxlbWVudCIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsInVuZGVmaW5lZCIsIl9fd2VicGFja19tb2R1bGVzX18iLCJnZXR0ZXIiLCJkIiwiYSIsImRlZmluaXRpb24iLCJrZXkiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJnIiwiZ2xvYmFsVGhpcyIsIkZ1bmN0aW9uIiwicHJvcCIsImhhc093blByb3BlcnR5Iiwic2NyaXB0VXJsIiwiaW1wb3J0U2NyaXB0cyIsImxvY2F0aW9uIiwiY3VycmVudFNjcmlwdCIsInNyYyIsInNjcmlwdHMiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsIkVycm9yIiwicCIsInN0eWxlU2hlZXQiLCJjc3NUZXh0IiwiZmlyc3RDaGlsZCIsImFwcGVuZENoaWxkIiwiY3JlYXRlVGV4dE5vZGUiLCJub25jZSIsImdldEVsZW1lbnRCeUlkIiwiaGVhZGVyIiwibXlMb2dvIiwibmF2TWVudSIsIm1lbnVMaW5rc1BhcmVudCIsImFycmF5IiwibWVudUxpbmsiLCJpbm5lckhUTUwiLCJjcmVhdGVNZW51IiwiYm9keVNlY3Rpb24iLCJib2R5Q29udGFpbmVyIiwiaG9tZUNvbnRhaW5lciIsImNsYXNzTGlzdCIsImFkZCIsImhvbWVIZWFkaW5nIiwidGV4dENvbnRlbnQiLCJob21lQ29udGVudCIsImRpc3BsYXlIb21lIiwibmV3Qm9keUNvbnRhaW5lciIsImFib3V0VXNDb250YWluZXIiLCJhYm91dFVzSGVhZGluZyIsImFib3V0VXNDb250ZW50IiwibWVudUNvbnRhaW5lciIsIkRpc2giLCJwcmljZSIsImFkZFRvTWVudSIsIm1lbnVFbGVtZW50Q29udGFpbmVyIiwibWVudU5hbWUiLCJtZW51UHJpY2UiLCJoYW1idXJnZXIiLCJob3REb2ciLCJzYWxhZCIsImhvbWVCdG4iLCJhYm91dFVzQnRuIiwibWVudUJ0biIsImFkZEV2ZW50TGlzdGVuZXIiLCJkaXNwbGF5QWJvdXRVcyIsImRpc3BsYXlNZW51Il0sIm1hcHBpbmdzIjoiMkhBS0lBLEVBQTBCLElBQTRCLEtBQ3REQyxFQUFxQyxJQUFnQyxHQUV6RUQsRUFBd0JFLEtBQUssQ0FBQ0MsRUFBT0MsR0FBSSxraEJBQW9oQkgsRUFBcUMsMGJBQTJiLEdBQUcsQ0FBQyxRQUFVLEVBQUUsUUFBVSxDQUFDLDZCQUE2QixNQUFRLEdBQUcsU0FBVyxvZUFBb2UsZUFBaUIsQ0FBQyx3K0JBQTArQixXQUFhLE1BRXhsRixXLFFDRkFFLEVBQU9FLFFBQVUsU0FBVUMs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LFlBQVk4QyxHQUV4QixNQUFNUSxFQUFtQm5HLFNBQVNtQyxjQUFjLE9BQ2hEZ0UsRUFBaUIzRCxhQUFhLEtBQU0sa0JBRXBDNEQsRUFBaUJ0QixZQUFZdUIsR0FDN0JELEVBQWlCdEIsWUFBWXdCLEdBRzdCSCxFQUFpQnJCLFlBQVlzQixHQUM3QlYsRUFBWVosWUFBWXFCLEdFSDFCa0IsTUFJRkYsRUFBUUMsaUJBQWlCLFNBQVMsTURPM0IsV0FDSCxNQUFNMUIsRUFBYzFGLFNBQVNDLGNBQWMsaUJBQ3JDMEYsRUFBZ0IzRixTQUFTQyxjQUFjLG1CQUM3Q3lGLEVBQVk3QyxZQUFZOEMsR0FFeEIsTUFBTVEsRUFBbUJuRyxTQUFTbUMsY0FBYyxPQUNoRGdFLEVBQWlCM0QsYUFBYSxLQUFNLGtCQUdwQzJELEVBQWlCckIsWUFBWXlCLEdBQzdCYixFQUFZWixZQUFZcUIsR0NoQjFCbUIsTyIsImZpbGUiOiJtYWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9jc3NXaXRoTWFwcGluZ1RvU3RyaW5nLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2dldFVybC5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8wX19fIGZyb20gXCIuL3Jlc3RhdXJhbnQtYmFja2dyb3VuZC5qcGVnXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMF9fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzBfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiLyogR2xvYmFsIENsYXNzZXMgKi9cXG5ib2R5IHtcXG4gICAgbWFyZ2luOiAwcHg7XFxuICAgIHBhZGRpbmc6IDBweDtcXG4gICAgaGVpZ2h0OiAxMDB2aDtcXG59XFxuXFxuI2NvbnRlbnQge1xcbiAgICBtYXJnaW46IDBweDtcXG4gICAgcGFkZGluZzogMHB4O1xcbiAgICBoZWlnaHQ6IDEwMCU7XFxufVxcbi8qIEhlYWRlciAqL1xcbmhlYWRlciB7XFxuICAgIGhlaWdodDogNjBweDtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDk2LCAyMTQsIDcyKTtcXG4gICAgZGlzcGxheTogZ3JpZDtcXG4gICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAzMDBweCAxZnI7XFxufVxcblxcbm5hdiB7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbn1cXG5cXG51bCB7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIGZsZXgtZGlyZWN0aW9uOiByb3c7XFxufVxcblxcbmxpIHtcXG4gICAgbWFyZ2luLXJpZ2h0OiAyMHB4O1xcbn1cXG5cXG4vKiBCb2R5ICovXFxuc2VjdGlvbiB7XFxuICAgIGhlaWdodDogMTAwJTtcXG4gICAgYmFja2dyb3VuZDp1cmwoXCIgKyBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8wX19fICsgXCIpIHJnYmEoMCwgMCwgMCwgMC42NTEpO1xcbiAgICBiYWNrZ3JvdW5kLXNpemU6Y292ZXI7XFxuICAgIGJhY2tncm91bmQtYmxlbmQtbW9kZTogbXVsdGlwbHk7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbn1cXG5cXG4jYm9keS1jb250YWluZXIge1xcbiAgICBtaW4td2lkdGg6IDYwdnc7XFxuICAgIG1heC13aWR0aDogNzB2dztcXG4gICAgbWluLWhlaWdodDogNjB2aDtcXG4gICAgbWF4LWhlaWdodDogNzB2aDtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgxOTAsIDQyLCA0MiwgMC44Nyk7XFxuICAgIGJvcmRlci1yYWRpdXM6IDEwcHg7XFxuICAgIGJvcmRlci1zdHlsZTogc29saWQ7XFxuICAgIGJvcmRlci13aWR0aDogM3B4O1xcbiAgICBib3JkZXItY29sb3I6IHJnYigwLCAwLCAwKTtcXG59XCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL3N0eWxlLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQSxtQkFBbUI7QUFDbkI7SUFDSSxXQUFXO0lBQ1gsWUFBWTtJQUNaLGFBQWE7QUFDakI7O0FBRUE7SUFDSSxXQUFXO0lBQ1gsWUFBWTtJQUNaLFlBQVk7QUFDaEI7QUFDQSxXQUFXO0FBQ1g7SUFDSSxZQUFZO0lBQ1osa0NBQWtDO0lBQ2xDLGFBQWE7SUFDYixnQ0FBZ0M7QUFDcEM7O0FBRUE7SUFDSSxhQUFhO0lBQ2IsdUJBQXVCO0FBQzNCOztBQUVBO0lBQ0ksYUFBYTtJQUNiLG1CQUFtQjtBQUN2Qjs7QUFFQTtJQUNJLGtCQUFrQjtBQUN0Qjs7QUFFQSxTQUFTO0FBQ1Q7SUFDSSxZQUFZO0lBQ1osdUVBQW1FO0lBQ25FLHFCQUFxQjtJQUNyQiwrQkFBK0I7SUFDL0IsYUFBYTtJQUNiLHVCQUF1QjtJQUN2QixtQkFBbUI7QUFDdkI7O0FBRUE7SUFDSSxlQUFlO0lBQ2YsZUFBZTtJQUNmLGdCQUFnQjtJQUNoQixnQkFBZ0I7SUFDaEIseUNBQXlDO0lBQ3pDLG1CQUFtQjtJQUNuQixtQkFBbUI7SUFDbkIsaUJBQWlCO0lBQ2pCLDBCQUEwQjtBQUM5QlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIvKiBHbG9iYWwgQ2xhc3NlcyAqL1xcbmJvZHkge1xcbiAgICBtYXJnaW46IDBweDtcXG4gICAgcGFkZGluZzogMHB4O1xcbiAgICBoZWlnaHQ6IDEwMHZoO1xcbn1cXG5cXG4jY29udGVudCB7XFxuICAgIG1hcmdpbjogMHB4O1xcbiAgICBwYWRkaW5nOiAwcHg7XFxuICAgIGhlaWdodDogMTAwJTtcXG59XFxuLyogSGVhZGVyICovXFxuaGVhZGVyIHtcXG4gICAgaGVpZ2h0OiA2MHB4O1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoOTYsIDIxNCwgNzIpO1xcbiAgICBkaXNwbGF5OiBncmlkO1xcbiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDMwMHB4IDFmcjtcXG59XFxuXFxubmF2IHtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxufVxcblxcbnVsIHtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgZmxleC1kaXJlY3Rpb246IHJvdztcXG59XFxuXFxubGkge1xcbiAgICBtYXJnaW4tcmlnaHQ6IDIwcHg7XFxufVxcblxcbi8qIEJvZHkgKi9cXG5zZWN0aW9uIHtcXG4gICAgaGVpZ2h0OiAxMDAlO1xcbiAgICBiYWNrZ3JvdW5kOnVybChcXFwiLi9yZXN0YXVyYW50LWJhY2tncm91bmQuanBlZ1xcXCIpIHJnYmEoMCwgMCwgMCwgMC42NTEpO1xcbiAgICBiYWNrZ3JvdW5kLXNpemU6Y292ZXI7XFxuICAgIGJhY2tncm91bmQtYmxlbmQtbW9kZTogbXVsdGlwbHk7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbn1cXG5cXG4jYm9keS1jb250YWluZXIge1xcbiAgICBtaW4td2lkdGg6IDYwdnc7XFxuICAgIG1heC13aWR0aDogNzB2dztcXG4gICAgbWluLWhlaWdodDogNjB2aDtcXG4gICAgbWF4LWhlaWdodDogNzB2aDtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgxOTAsIDQyLCA0MiwgMC44Nyk7XFxuICAgIGJvcmRlci1yYWRpdXM6IDEwcHg7XFxuICAgIGJvcmRlci1zdHlsZTogc29saWQ7XFxuICAgIGJvcmRlci13aWR0aDogM3B4O1xcbiAgICBib3JkZXItY29sb3I6IHJnYigwLCAwLCAwKTtcXG59XCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIlwidXNlIHN0cmljdFwiO1xuXG4vKlxuICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuICBBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xuLy8gY3NzIGJhc2UgY29kZSwgaW5qZWN0ZWQgYnkgdGhlIGNzcy1sb2FkZXJcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKSB7XG4gIHZhciBsaXN0ID0gW107IC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcblxuICBsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICB2YXIgY29udGVudCA9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSk7XG5cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIHJldHVybiBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKS5jb25jYXQoY29udGVudCwgXCJ9XCIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY29udGVudDtcbiAgICB9KS5qb2luKFwiXCIpO1xuICB9OyAvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuXG5cbiAgbGlzdC5pID0gZnVuY3Rpb24gKG1vZHVsZXMsIG1lZGlhUXVlcnksIGRlZHVwZSkge1xuICAgIGlmICh0eXBlb2YgbW9kdWxlcyA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgICBtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCBcIlwiXV07XG4gICAgfVxuXG4gICAgdmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcblxuICAgIGlmIChkZWR1cGUpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLWRlc3RydWN0dXJpbmdcbiAgICAgICAgdmFyIGlkID0gdGhpc1tpXVswXTtcblxuICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICAgIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBtb2R1bGVzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIGl0ZW0gPSBbXS5jb25jYXQobW9kdWxlc1tfaV0pO1xuXG4gICAgICBpZiAoZGVkdXBlICYmIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnRpbnVlXG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAobWVkaWFRdWVyeSkge1xuICAgICAgICBpZiAoIWl0ZW1bMl0pIHtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWFRdWVyeTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzJdID0gXCJcIi5jb25jYXQobWVkaWFRdWVyeSwgXCIgYW5kIFwiKS5jb25jYXQoaXRlbVsyXSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbGlzdC5wdXNoKGl0ZW0pO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gbGlzdDtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmZ1bmN0aW9uIF9zbGljZWRUb0FycmF5KGFyciwgaSkgeyByZXR1cm4gX2FycmF5V2l0aEhvbGVzKGFycikgfHwgX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgfHwgX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KGFyciwgaSkgfHwgX25vbkl0ZXJhYmxlUmVzdCgpOyB9XG5cbmZ1bmN0aW9uIF9ub25JdGVyYWJsZVJlc3QoKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7IH1cblxuZnVuY3Rpb24gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KG8sIG1pbkxlbikgeyBpZiAoIW8pIHJldHVybjsgaWYgKHR5cGVvZiBvID09PSBcInN0cmluZ1wiKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgdmFyIG4gPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobykuc2xpY2UoOCwgLTEpOyBpZiAobiA9PT0gXCJPYmplY3RcIiAmJiBvLmNvbnN0cnVjdG9yKSBuID0gby5jb25zdHJ1Y3Rvci5uYW1lOyBpZiAobiA9PT0gXCJNYXBcIiB8fCBuID09PSBcIlNldFwiKSByZXR1cm4gQXJyYXkuZnJvbShvKTsgaWYgKG4gPT09IFwiQXJndW1lbnRzXCIgfHwgL14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QobikpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pOyB9XG5cbmZ1bmN0aW9uIF9hcnJheUxpa2VUb0FycmF5KGFyciwgbGVuKSB7IGlmIChsZW4gPT0gbnVsbCB8fCBsZW4gPiBhcnIubGVuZ3RoKSBsZW4gPSBhcnIubGVuZ3RoOyBmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShsZW4pOyBpIDwgbGVuOyBpKyspIHsgYXJyMltpXSA9IGFycltpXTsgfSByZXR1cm4gYXJyMjsgfVxuXG5mdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB7IHZhciBfaSA9IGFyciAmJiAodHlwZW9mIFN5bWJvbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBhcnJbU3ltYm9sLml0ZXJhdG9yXSB8fCBhcnJbXCJAQGl0ZXJhdG9yXCJdKTsgaWYgKF9pID09IG51bGwpIHJldHVybjsgdmFyIF9hcnIgPSBbXTsgdmFyIF9uID0gdHJ1ZTsgdmFyIF9kID0gZmFsc2U7IHZhciBfcywgX2U7IHRyeSB7IGZvciAoX2kgPSBfaS5jYWxsKGFycik7ICEoX24gPSAoX3MgPSBfaS5uZXh0KCkpLmRvbmUpOyBfbiA9IHRydWUpIHsgX2Fyci5wdXNoKF9zLnZhbHVlKTsgaWYgKGkgJiYgX2Fyci5sZW5ndGggPT09IGkpIGJyZWFrOyB9IH0gY2F0Y2ggKGVycikgeyBfZCA9IHRydWU7IF9lID0gZXJyOyB9IGZpbmFsbHkgeyB0cnkgeyBpZiAoIV9uICYmIF9pW1wicmV0dXJuXCJdICE9IG51bGwpIF9pW1wicmV0dXJuXCJdKCk7IH0gZmluYWxseSB7IGlmIChfZCkgdGhyb3cgX2U7IH0gfSByZXR1cm4gX2FycjsgfVxuXG5mdW5jdGlvbiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBhcnI7IH1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0pIHtcbiAgdmFyIF9pdGVtID0gX3NsaWNlZFRvQXJyYXkoaXRlbSwgNCksXG4gICAgICBjb250ZW50ID0gX2l0ZW1bMV0sXG4gICAgICBjc3NNYXBwaW5nID0gX2l0ZW1bM107XG5cbiAgaWYgKHR5cGVvZiBidG9hID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgICB2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoY3NzTWFwcGluZykpKSk7XG4gICAgdmFyIGRhdGEgPSBcInNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LFwiLmNvbmNhdChiYXNlNjQpO1xuICAgIHZhciBzb3VyY2VNYXBwaW5nID0gXCIvKiMgXCIuY29uY2F0KGRhdGEsIFwiICovXCIpO1xuICAgIHZhciBzb3VyY2VVUkxzID0gY3NzTWFwcGluZy5zb3VyY2VzLm1hcChmdW5jdGlvbiAoc291cmNlKSB7XG4gICAgICByZXR1cm4gXCIvKiMgc291cmNlVVJMPVwiLmNvbmNhdChjc3NNYXBwaW5nLnNvdXJjZVJvb3QgfHwgXCJcIikuY29uY2F0KHNvdXJjZSwgXCIgKi9cIik7XG4gICAgfSk7XG4gICAgcmV0dXJuIFtjb250ZW50XS5jb25jYXQoc291cmNlVVJMcykuY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbihcIlxcblwiKTtcbiAgfVxuXG4gIHJldHVybiBbY29udGVudF0uam9pbihcIlxcblwiKTtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHVybCwgb3B0aW9ucykge1xuICBpZiAoIW9wdGlvbnMpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICBvcHRpb25zID0ge307XG4gIH0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVyc2NvcmUtZGFuZ2xlLCBuby1wYXJhbS1yZWFzc2lnblxuXG5cbiAgdXJsID0gdXJsICYmIHVybC5fX2VzTW9kdWxlID8gdXJsLmRlZmF1bHQgOiB1cmw7XG5cbiAgaWYgKHR5cGVvZiB1cmwgIT09IFwic3RyaW5nXCIpIHtcbiAgICByZXR1cm4gdXJsO1xuICB9IC8vIElmIHVybCBpcyBhbHJlYWR5IHdyYXBwZWQgaW4gcXVvdGVzLCByZW1vdmUgdGhlbVxuXG5cbiAgaWYgKC9eWydcIl0uKlsnXCJdJC8udGVzdCh1cmwpKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgdXJsID0gdXJsLnNsaWNlKDEsIC0xKTtcbiAgfVxuXG4gIGlmIChvcHRpb25zLmhhc2gpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICB1cmwgKz0gb3B0aW9ucy5oYXNoO1xuICB9IC8vIFNob3VsZCB1cmwgYmUgd3JhcHBlZD9cbiAgLy8gU2VlIGh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3MtdmFsdWVzLTMvI3VybHNcblxuXG4gIGlmICgvW1wiJygpIFxcdFxcbl0vLnRlc3QodXJsKSB8fCBvcHRpb25zLm5lZWRRdW90ZXMpIHtcbiAgICByZXR1cm4gXCJcXFwiXCIuY29uY2F0KHVybC5yZXBsYWNlKC9cIi9nLCAnXFxcXFwiJykucmVwbGFjZSgvXFxuL2csIFwiXFxcXG5cIiksIFwiXFxcIlwiKTtcbiAgfVxuXG4gIHJldHVybiB1cmw7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgbWVtbyA9IHt9O1xuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5cbmZ1bmN0aW9uIGdldFRhcmdldCh0YXJnZXQpIHtcbiAgaWYgKHR5cGVvZiBtZW1vW3RhcmdldF0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICB2YXIgc3R5bGVUYXJnZXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRhcmdldCk7IC8vIFNwZWNpYWwgY2FzZSB0byByZXR1cm4gaGVhZCBvZiBpZnJhbWUgaW5zdGVhZCBvZiBpZnJhbWUgaXRzZWxmXG5cbiAgICBpZiAod2luZG93LkhUTUxJRnJhbWVFbGVtZW50ICYmIHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB7XG4gICAgICB0cnkge1xuICAgICAgICAvLyBUaGlzIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFjY2VzcyB0byBpZnJhbWUgaXMgYmxvY2tlZFxuICAgICAgICAvLyBkdWUgdG8gY3Jvc3Mtb3JpZ2luIHJlc3RyaWN0aW9uc1xuICAgICAgICBzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dFxuICAgICAgICBzdHlsZVRhcmdldCA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbWVtb1t0YXJnZXRdID0gc3R5bGVUYXJnZXQ7XG4gIH1cblxuICByZXR1cm4gbWVtb1t0YXJnZXRdO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldFRhcmdldDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIHN0eWxlc0luRG9tID0gW107XG5cbmZ1bmN0aW9uIGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpIHtcbiAgdmFyIHJlc3VsdCA9IC0xO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzSW5Eb20ubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoc3R5bGVzSW5Eb21baV0uaWRlbnRpZmllciA9PT0gaWRlbnRpZmllcikge1xuICAgICAgcmVzdWx0ID0gaTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKSB7XG4gIHZhciBpZENvdW50TWFwID0ge307XG4gIHZhciBpZGVudGlmaWVycyA9IFtdO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpdGVtID0gbGlzdFtpXTtcbiAgICB2YXIgaWQgPSBvcHRpb25zLmJhc2UgPyBpdGVtWzBdICsgb3B0aW9ucy5iYXNlIDogaXRlbVswXTtcbiAgICB2YXIgY291bnQgPSBpZENvdW50TWFwW2lkXSB8fCAwO1xuICAgIHZhciBpZGVudGlmaWVyID0gXCJcIi5jb25jYXQoaWQsIFwiIFwiKS5jb25jYXQoY291bnQpO1xuICAgIGlkQ291bnRNYXBbaWRdID0gY291bnQgKyAxO1xuICAgIHZhciBpbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgIHZhciBvYmogPSB7XG4gICAgICBjc3M6IGl0ZW1bMV0sXG4gICAgICBtZWRpYTogaXRlbVsyXSxcbiAgICAgIHNvdXJjZU1hcDogaXRlbVszXVxuICAgIH07XG5cbiAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICBzdHlsZXNJbkRvbVtpbmRleF0ucmVmZXJlbmNlcysrO1xuICAgICAgc3R5bGVzSW5Eb21baW5kZXhdLnVwZGF0ZXIob2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3R5bGVzSW5Eb20ucHVzaCh7XG4gICAgICAgIGlkZW50aWZpZXI6IGlkZW50aWZpZXIsXG4gICAgICAgIHVwZGF0ZXI6IGFkZFN0eWxlKG9iaiwgb3B0aW9ucyksXG4gICAgICAgIHJlZmVyZW5jZXM6IDFcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlkZW50aWZpZXJzLnB1c2goaWRlbnRpZmllcik7XG4gIH1cblxuICByZXR1cm4gaWRlbnRpZmllcnM7XG59XG5cbmZ1bmN0aW9uIGFkZFN0eWxlKG9iaiwgb3B0aW9ucykge1xuICB2YXIgYXBpID0gb3B0aW9ucy5kb21BUEkob3B0aW9ucyk7XG4gIGFwaS51cGRhdGUob2JqKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZVN0eWxlKG5ld09iaikge1xuICAgIGlmIChuZXdPYmopIHtcbiAgICAgIGlmIChuZXdPYmouY3NzID09PSBvYmouY3NzICYmIG5ld09iai5tZWRpYSA9PT0gb2JqLm1lZGlhICYmIG5ld09iai5zb3VyY2VNYXAgPT09IG9iai5zb3VyY2VNYXApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBhcGkudXBkYXRlKG9iaiA9IG5ld09iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFwaS5yZW1vdmUoKTtcbiAgICB9XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGxpc3QsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIGxpc3QgPSBsaXN0IHx8IFtdO1xuICB2YXIgbGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlKG5ld0xpc3QpIHtcbiAgICBuZXdMaXN0ID0gbmV3TGlzdCB8fCBbXTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tpXTtcbiAgICAgIHZhciBpbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgICAgc3R5bGVzSW5Eb21baW5kZXhdLnJlZmVyZW5jZXMtLTtcbiAgICB9XG5cbiAgICB2YXIgbmV3TGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKG5ld0xpc3QsIG9wdGlvbnMpO1xuXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBfaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tfaV07XG5cbiAgICAgIHZhciBfaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihfaWRlbnRpZmllcik7XG5cbiAgICAgIGlmIChzdHlsZXNJbkRvbVtfaW5kZXhdLnJlZmVyZW5jZXMgPT09IDApIHtcbiAgICAgICAgc3R5bGVzSW5Eb21bX2luZGV4XS51cGRhdGVyKCk7XG5cbiAgICAgICAgc3R5bGVzSW5Eb20uc3BsaWNlKF9pbmRleCwgMSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbGFzdElkZW50aWZpZXJzID0gbmV3TGFzdElkZW50aWZpZXJzO1xuICB9O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykge1xuICB2YXIgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7XG4gIG9wdGlvbnMuc2V0QXR0cmlidXRlcyhzdHlsZSwgb3B0aW9ucy5hdHRyaWJ1dGVzKTtcbiAgb3B0aW9ucy5pbnNlcnQoc3R5bGUpO1xuICByZXR1cm4gc3R5bGU7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0U3R5bGVFbGVtZW50OyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGFwcGx5KHN0eWxlLCBvcHRpb25zLCBvYmopIHtcbiAgdmFyIGNzcyA9IG9iai5jc3M7XG4gIHZhciBtZWRpYSA9IG9iai5tZWRpYTtcbiAgdmFyIHNvdXJjZU1hcCA9IG9iai5zb3VyY2VNYXA7XG5cbiAgaWYgKG1lZGlhKSB7XG4gICAgc3R5bGUuc2V0QXR0cmlidXRlKFwibWVkaWFcIiwgbWVkaWEpO1xuICB9IGVsc2Uge1xuICAgIHN0eWxlLnJlbW92ZUF0dHJpYnV0ZShcIm1lZGlhXCIpO1xuICB9XG5cbiAgaWYgKHNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIGNzcyArPSBcIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIuY29uY2F0KGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSksIFwiICovXCIpO1xuICB9IC8vIEZvciBvbGQgSUVcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG5cblxuICBvcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGUpO1xufVxuXG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGUpIHtcbiAgLy8gaXN0YW5idWwgaWdub3JlIGlmXG4gIGlmIChzdHlsZS5wYXJlbnROb2RlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgc3R5bGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZSk7XG59XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuXG5mdW5jdGlvbiBkb21BUEkob3B0aW9ucykge1xuICB2YXIgc3R5bGUgPSBvcHRpb25zLmluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKTtcbiAgcmV0dXJuIHtcbiAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZShvYmopIHtcbiAgICAgIGFwcGx5KHN0eWxlLCBvcHRpb25zLCBvYmopO1xuICAgIH0sXG4gICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7XG4gICAgICByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGUpO1xuICAgIH1cbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBkb21BUEk7IiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHRpZDogbW9kdWxlSWQsXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSAobW9kdWxlKSA9PiB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdCgpID0+IChtb2R1bGVbJ2RlZmF1bHQnXSkgOlxuXHRcdCgpID0+IChtb2R1bGUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5nID0gKGZ1bmN0aW9uKCkge1xuXHRpZiAodHlwZW9mIGdsb2JhbFRoaXMgPT09ICdvYmplY3QnKSByZXR1cm4gZ2xvYmFsVGhpcztcblx0dHJ5IHtcblx0XHRyZXR1cm4gdGhpcyB8fCBuZXcgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdGlmICh0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0JykgcmV0dXJuIHdpbmRvdztcblx0fVxufSkoKTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwidmFyIHNjcmlwdFVybDtcbmlmIChfX3dlYnBhY2tfcmVxdWlyZV9fLmcuaW1wb3J0U2NyaXB0cykgc2NyaXB0VXJsID0gX193ZWJwYWNrX3JlcXVpcmVfXy5nLmxvY2F0aW9uICsgXCJcIjtcbnZhciBkb2N1bWVudCA9IF9fd2VicGFja19yZXF1aXJlX18uZy5kb2N1bWVudDtcbmlmICghc2NyaXB0VXJsICYmIGRvY3VtZW50KSB7XG5cdGlmIChkb2N1bWVudC5jdXJyZW50U2NyaXB0KVxuXHRcdHNjcmlwdFVybCA9IGRvY3VtZW50LmN1cnJlbnRTY3JpcHQuc3JjXG5cdGlmICghc2NyaXB0VXJsKSB7XG5cdFx0dmFyIHNjcmlwdHMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcInNjcmlwdFwiKTtcblx0XHRpZihzY3JpcHRzLmxlbmd0aCkgc2NyaXB0VXJsID0gc2NyaXB0c1tzY3JpcHRzLmxlbmd0aCAtIDFdLnNyY1xuXHR9XG59XG4vLyBXaGVuIHN1cHBvcnRpbmcgYnJvd3NlcnMgd2hlcmUgYW4gYXV0b21hdGljIHB1YmxpY1BhdGggaXMgbm90IHN1cHBvcnRlZCB5b3UgbXVzdCBzcGVjaWZ5IGFuIG91dHB1dC5wdWJsaWNQYXRoIG1hbnVhbGx5IHZpYSBjb25maWd1cmF0aW9uXG4vLyBvciBwYXNzIGFuIGVtcHR5IHN0cmluZyAoXCJcIikgYW5kIHNldCB0aGUgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gdmFyaWFibGUgZnJvbSB5b3VyIGNvZGUgdG8gdXNlIHlvdXIgb3duIGxvZ2ljLlxuaWYgKCFzY3JpcHRVcmwpIHRocm93IG5ldyBFcnJvcihcIkF1dG9tYXRpYyBwdWJsaWNQYXRoIGlzIG5vdCBzdXBwb3J0ZWQgaW4gdGhpcyBicm93c2VyXCIpO1xuc2NyaXB0VXJsID0gc2NyaXB0VXJsLnJlcGxhY2UoLyMuKiQvLCBcIlwiKS5yZXBsYWNlKC9cXD8uKiQvLCBcIlwiKS5yZXBsYWNlKC9cXC9bXlxcL10rJC8sIFwiL1wiKTtcbl9fd2VicGFja19yZXF1aXJlX18ucCA9IHNjcmlwdFVybDsiLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGdldFRhcmdldCBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2dldFRhcmdldC5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZS5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBmdW5jdGlvbihjc3MsIHN0eWxlKXtcbiAgICAgIGlmIChzdHlsZS5zdHlsZVNoZWV0KSB7XG4gICAgICAgIHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcbiAgICAgIH0gZWxzZSB7XG4gICAgICB3aGlsZSAoc3R5bGUuZmlyc3RDaGlsZCkge1xuICAgICAgICBzdHlsZS5yZW1vdmVDaGlsZChzdHlsZS5maXJzdENoaWxkKTtcbiAgICAgIH1cblxuICAgICAgc3R5bGUuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG4gICAgfVxuICB9O1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gZnVuY3Rpb24oc3R5bGUpIHtcbiAgICAgICAgdmFyIG5vbmNlID1cbiAgICAgICAgICB0eXBlb2YgX193ZWJwYWNrX25vbmNlX18gIT09IFwidW5kZWZpbmVkXCIgPyBfX3dlYnBhY2tfbm9uY2VfXyA6IG51bGw7XG5cbiAgICAgICAgaWYgKG5vbmNlKSB7XG4gICAgICAgICAgc3R5bGUuc2V0QXR0cmlidXRlKFwibm9uY2VcIiwgbm9uY2UpO1xuICAgICAgICB9XG4gICAgICB9O1xub3B0aW9ucy5pbnNlcnQgPSBmdW5jdGlvbihzdHlsZSl7XG4gICAgdmFyIHRhcmdldCA9IGdldFRhcmdldChcImhlYWRcIik7XG5cbiAgICBpZiAoIXRhcmdldCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBcIkNvdWxkbid0IGZpbmQgYSBzdHlsZSB0YXJnZXQuIFRoaXMgcHJvYmFibHkgbWVhbnMgdGhhdCB0aGUgdmFsdWUgZm9yIHRoZSAnaW5zZXJ0JyBwYXJhbWV0ZXIgaXMgaW52YWxpZC5cIlxuICAgICAgKTtcbiAgICB9XG5cbiAgICB0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xuICB9O1xub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGUuY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiaW1wb3J0IExvZ28gZnJvbSAnLi9yZXN0YXVyYW50LWxvZ28uc3ZnJ1xuXG4vLyBHRVQgSFRNTCBDT05URU5UXG5jb25zdCBjb250ZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjb250ZW50XCIpO1xuXG4vLyBIRUFERVJcbmNvbnN0IGhlYWRlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJoZWFkZXJcIik7XG5cbi8vIEhFQURFUiA9PiBMT0dPXG5jb25zdCBoZWFkZXJMZWZ0Q29sID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKVxuY29uc3QgbXlMb2dvID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImltZ1wiKTtcbm15TG9nby5zZXRBdHRyaWJ1dGUoXCJzcmNcIiwgTG9nbyk7XG5teUxvZ28uc2V0QXR0cmlidXRlKFwiYWx0XCIsIFwiUmVzdGF1cmFudCBMb2dvXCIpO1xubXlMb2dvLnNldEF0dHJpYnV0ZShcIndpZHRoXCIsIFwiMzBweFwiKVxuXG4vLyBIRUFERVIgPT4gTkFWIE1FTlVcbmNvbnN0IG5hdk1lbnUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibmF2XCIpO1xuXG4vLyBIRUFERVIgPT4gTkFWIE1FTlUgPT4gTElOS1MgTElTVFxuY29uc3QgbWVudUxpbmtzUGFyZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInVsXCIpO1xuXG4vLyBIRUFERVIgPT4gTkFWIE1FTlUgPT4gTElOS1MgTElTVCA9PiBMSU5LU1xuY29uc3QgbGlua3MgPSBbXCJIb21lXCIsIFwiQWJvdXQgVXNcIiwgXCJNZW51XCJdO1xuXG5mdW5jdGlvbiBjcmVhdGVNZW51KGFycmF5KSB7XG4gICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IGFycmF5Lmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICBjb25zdCBtZW51TGluayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsaVwiKTtcbiAgICAgICAgbWVudUxpbmsuc2V0QXR0cmlidXRlKFwic3R5bGVcIiwgXCJsaXN0LXN0eWxlLXR5cGU6bm9uZVwiKTtcblxuICAgICAgICBtZW51TGluay5pbm5lckhUTUwgPSBcIjxidXR0b24gaWQ9YnRuLVwiK2luZGV4K1wiPlwiK2FycmF5W2luZGV4XStcIjwvYnV0dG9uPlwiO1xuICAgICAgICBtZW51TGlua3NQYXJlbnQuYXBwZW5kQ2hpbGQobWVudUxpbmspO1xuICAgIH1cbn1cbmNyZWF0ZU1lbnUobGlua3MpO1xuXG4vLyBCT0RZXG5jb25zdCBib2R5U2VjdGlvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzZWN0aW9uXCIpO1xuYm9keVNlY3Rpb24uc2V0QXR0cmlidXRlKFwiaWRcIiwgXCJib2R5LXNlY3Rpb25cIilcbmNvbnN0IGJvZHlDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbmJvZHlDb250YWluZXIuc2V0QXR0cmlidXRlKFwiaWRcIiwgXCJib2R5LWNvbnRhaW5lclwiKTtcblxuZXhwb3J0IGZ1bmN0aW9uIGRpc3BsYXlUZW1wbGF0ZSgpIHtcbiAgICAvLyBBUFBFTkRJTkcgSEVBREVSXG4gICAgaGVhZGVyLmFwcGVuZENoaWxkKG15TG9nbyk7XG4gICAgbmF2TWVudS5hcHBlbmRDaGlsZChtZW51TGlua3NQYXJlbnQpO1xuICAgIGhlYWRlci5hcHBlbmRDaGlsZChuYXZNZW51KTtcbiAgICBjb250ZW50LmFwcGVuZENoaWxkKGhlYWRlcik7XG4gICAgLy8gQVBQRU5ESU5HIFNFQ1RJT05cbiAgICBib2R5U2VjdGlvbi5hcHBlbmRDaGlsZChib2R5Q29udGFpbmVyKTtcbiAgICBjb250ZW50LmFwcGVuZENoaWxkKGJvZHlTZWN0aW9uKTtcbn1cblxuIiwiLy8gQ1JFQVRFIEhPTUUgQ09OVEFJTkVSXG5jb25zdCBob21lQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbmhvbWVDb250YWluZXIuY2xhc3NMaXN0LmFkZChcImNvbnRlbnQtY29udGFpbmVyXCIpO1xuXG4vLyBDUkVBVEUgSE9NRSBIRUFESU5HXG5jb25zdCBob21lSGVhZGluZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJoMVwiKTtcbmhvbWVIZWFkaW5nLnRleHRDb250ZW50ID0gXCJXZWxjb21lIFRvIE15IFJlc3RhdXJhbnRcIlxuXG4vLyBDUkVBVEUgSE9NRSBDT05URU5UXG5jb25zdCBob21lQ29udGVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJwXCIpO1xuaG9tZUNvbnRlbnQudGV4dENvbnRlbnQgPSBcIldlIHNpbXBseSBzZXJ2ZSB0aGUgYmVzdCBmb29kIG9mIHRoZSB3b3JsZFwiXG5cbi8vIEFQUEVORCBIT01FXG5leHBvcnQgZnVuY3Rpb24gZGlzcGxheUhvbWUoKSB7XG4gICAgY29uc3QgYm9keVNlY3Rpb24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2JvZHktc2VjdGlvblwiKVxuICAgIGNvbnN0IGJvZHlDb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2JvZHktY29udGFpbmVyXCIpXG4gICAgYm9keVNlY3Rpb24ucmVtb3ZlQ2hpbGQoYm9keUNvbnRhaW5lcik7XG5cbiAgICBjb25zdCBuZXdCb2R5Q29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICBuZXdCb2R5Q29udGFpbmVyLnNldEF0dHJpYnV0ZShcImlkXCIsIFwiYm9keS1jb250YWluZXJcIik7XG5cbiAgICBob21lQ29udGFpbmVyLmFwcGVuZENoaWxkKGhvbWVIZWFkaW5nKTtcbiAgICBob21lQ29udGFpbmVyLmFwcGVuZENoaWxkKGhvbWVDb250ZW50KTtcblxuICAgIC8vIEFQUEVORCBIT01FIENPTlRBSU5FUlxuICAgIG5ld0JvZHlDb250YWluZXIuYXBwZW5kQ2hpbGQoaG9tZUNvbnRhaW5lcik7XG4gICAgYm9keVNlY3Rpb24uYXBwZW5kQ2hpbGQobmV3Qm9keUNvbnRhaW5lcik7XG59IiwiLy8gQ1JFQVRFIEFCT1VUIFVTIENPTlRBSU5FUlxuY29uc3QgYWJvdXRVc0NvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG5hYm91dFVzQ29udGFpbmVyLmNsYXNzTGlzdC5hZGQoXCJjb250ZW50LWNvbnRhaW5lclwiKTtcblxuLy8gQ1JFQVRFIEFCT1VUIFVTIEhFQURJTkdcbmNvbnN0IGFib3V0VXNIZWFkaW5nID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImgxXCIpO1xuYWJvdXRVc0hlYWRpbmcudGV4dENvbnRlbnQgPSBcIjMwMDAgWWVhcnMgU2VydmluZyBPdXIgQ2xpZW50c1wiXG5cbi8vIENSRUFURSBIT01FIENPTlRFTlRcbmNvbnN0IGFib3V0VXNDb250ZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInBcIik7XG5hYm91dFVzQ29udGVudC50ZXh0Q29udGVudCA9IFwiV2UgYXJlIGEgZmFtaWx5IHJlc3R1YXJhbnQgZnVuZGVkIG9uIDEwMDAgQS5DLiBXZSBpbnZlbnRlZCB0aGUgaG90LWRvZyBhbmQgaGFtYnVyZ2Vycy5cIjtcblxuLy8gQVBQRU5EIEhPTUVcbmV4cG9ydCBmdW5jdGlvbiBkaXNwbGF5QWJvdXRVcygpIHtcbiAgICBjb25zdCBib2R5U2VjdGlvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjYm9keS1zZWN0aW9uXCIpXG4gICAgY29uc3QgYm9keUNvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjYm9keS1jb250YWluZXJcIilcbiAgICBib2R5U2VjdGlvbi5yZW1vdmVDaGlsZChib2R5Q29udGFpbmVyKTtcblxuICAgIGNvbnN0IG5ld0JvZHlDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpXG4gICAgbmV3Qm9keUNvbnRhaW5lci5zZXRBdHRyaWJ1dGUoXCJpZFwiLCBcImJvZHktY29udGFpbmVyXCIpXG5cbiAgICBhYm91dFVzQ29udGFpbmVyLmFwcGVuZENoaWxkKGFib3V0VXNIZWFkaW5nKTtcbiAgICBhYm91dFVzQ29udGFpbmVyLmFwcGVuZENoaWxkKGFib3V0VXNDb250ZW50KTtcblxuICAgIC8vIEFQUEVORCBIT01FIENPTlRBSU5FUlxuICAgIG5ld0JvZHlDb250YWluZXIuYXBwZW5kQ2hpbGQoYWJvdXRVc0NvbnRhaW5lcik7XG4gICAgYm9keVNlY3Rpb24uYXBwZW5kQ2hpbGQobmV3Qm9keUNvbnRhaW5lcik7XG59IiwiLy8gQ1JFQVRFIE1FTlUgQ09OVEFJTkVSXG5jb25zdCBtZW51Q29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKVxubWVudUNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKFwiY29udGVudC1jb250YWluZXJcIik7XG5cbi8vIERJU0hFUyBDTEFTU1xuY2xhc3MgRGlzaCB7XG4gICAgY29uc3RydWN0b3IobmFtZSwgcHJpY2UpIHtcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICAgICAgdGhpcy5wcmljZSA9IHByaWNlO1xuICAgIH1cbiAgICBcbiAgICBhZGRUb01lbnUoKSB7XG4gICAgICAgIGNvbnN0IG1lbnVFbGVtZW50Q29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKVxuICAgICAgICBjb25zdCBtZW51TmFtZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgIG1lbnVOYW1lLmlubmVySFRNTCA9IHRoaXMubmFtZTtcbiAgICAgICAgY29uc3QgbWVudVByaWNlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgbWVudVByaWNlLmlubmVySFRNTCA9IHRoaXMucHJpY2U7XG4gICAgICAgIG1lbnVFbGVtZW50Q29udGFpbmVyLmFwcGVuZENoaWxkKG1lbnVOYW1lKTtcbiAgICAgICAgbWVudUVsZW1lbnRDb250YWluZXIuYXBwZW5kQ2hpbGQobWVudVByaWNlKTtcbiAgICAgICAgcmV0dXJuIG1lbnVFbGVtZW50Q29udGFpbmVyO1xuICAgIH1cbn1cblxuLy8gQ1JFQVRFIERJU0hFU1xubGV0IGhhbWJ1cmdlciA9IG5ldyBEaXNoKFwiSGFtYnVyZ3VlclwiLCBcIiQxMFwiKTtcbmxldCBob3REb2cgPSBuZXcgRGlzaChcIkhvdCBEb2dcIiwgXCIkN1wiKTtcbmxldCBzYWxhZCA9IG5ldyBEaXNoKFwiU2FsYWRcIiwgXCIkOFwiKTsgXG5cbi8vIEFQUEVORCBESVNIRVNcbm1lbnVDb250YWluZXIuYXBwZW5kQ2hpbGQoaGFtYnVyZ2VyLmFkZFRvTWVudSgpKVxubWVudUNvbnRhaW5lci5hcHBlbmRDaGlsZChob3REb2cuYWRkVG9NZW51KCkpXG5tZW51Q29udGFpbmVyLmFwcGVuZENoaWxkKHNhbGFkLmFkZFRvTWVudSgpKVxuXG4vLyBBUFBFTkQgTUVOVVxuZXhwb3J0IGZ1bmN0aW9uIGRpc3BsYXlNZW51KCkge1xuICAgIGNvbnN0IGJvZHlTZWN0aW9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNib2R5LXNlY3Rpb25cIilcbiAgICBjb25zdCBib2R5Q29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNib2R5LWNvbnRhaW5lclwiKVxuICAgIGJvZHlTZWN0aW9uLnJlbW92ZUNoaWxkKGJvZHlDb250YWluZXIpO1xuXG4gICAgY29uc3QgbmV3Qm9keUNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIilcbiAgICBuZXdCb2R5Q29udGFpbmVyLnNldEF0dHJpYnV0ZShcImlkXCIsIFwiYm9keS1jb250YWluZXJcIilcblxuICAgIC8vIEFQUEVORCBNRU5VIENPTlRBSU5FUlxuICAgIG5ld0JvZHlDb250YWluZXIuYXBwZW5kQ2hpbGQobWVudUNvbnRhaW5lcik7XG4gICAgYm9keVNlY3Rpb24uYXBwZW5kQ2hpbGQobmV3Qm9keUNvbnRhaW5lcik7XG59XG5cblxuXG5cblxuXG5cbiIsImltcG9ydCAnLi9zdHlsZS5jc3MnO1xuaW1wb3J0IHsgZGlzcGxheVRlbXBsYXRlIH0gZnJvbSAnLi9wYWdlLXRlbXBsYXRlLmpzJztcbmltcG9ydCB7IGRpc3BsYXlIb21lIH0gZnJvbSAnLi9ob21lLmpzJztcbmltcG9ydCB7IGRpc3BsYXlBYm91dFVzIH0gZnJvbSAnLi9hYm91dC11cydcbmltcG9ydCB7IGRpc3BsYXlNZW51IH0gZnJvbSAnLi9tZW51LmpzJztcblxuLy8gRElTUExBWSBQQUdFIFRFTVBMQVRFXG5kaXNwbGF5VGVtcGxhdGUoKTtcbmRpc3BsYXlIb21lKCk7XG5cbi8vIEdFVCBCVVRUT05TXG5jb25zdCBob21lQnRuID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJidG4tMFwiKTtcbmNvbnN0IGFib3V0VXNCdG4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImJ0bi0xXCIpO1xuY29uc3QgbWVudUJ0biA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYnRuLTJcIik7XG5cbi8vIEVWRU5UIExJU1RFTkVSU1xuLy8gSE9NRSBFVkVOVFxuaG9tZUJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgZGlzcGxheUhvbWUoKTtcbn0pO1xuXG4vLyBBQk9VVCBVUyBFVkVOVFxuYWJvdXRVc0J0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgZGlzcGxheUFib3V0VXMoKTtcbn0pO1xuXG4vLyBNRU5VIEVWRU5UXG5tZW51QnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICBkaXNwbGF5TWVudSgpO1xufSk7Il0sInNvdXJjZVJvb3QiOiIifQ==